name: Docker Build and Push 
 
on: 
  push: 
    branches: [ main ] 
 
jobs: 
  build-and-push: 
    runs-on: ubuntu-latest 
 
    steps: 
    - name: Checkout code 
      uses: actions/checkout@v4 
 
    - name: Set up Docker Buildx 
      uses: docker/setup-buildx-action@v2 
 
    - name: Login to Docker Hub 
      uses: docker/login-action@v2 
      with: 
        username: ${{ secrets.DOCKERHUB_USERNAME }} 
        password: ${{ secrets.DOCKERHUB_TOKEN }} 
 
    - name: Build and push React app 
        # Build and push the React app 
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/react-mysql-app:latest . 
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/react-mysql-app:latest 
 
        echo "React app built and pushed successfully" 
 
    - name: Create production docker-compose 
        # Create production version by replacing build context with image reference 
        # This is a generic approach that should work for most docker-compose files 
        echo "version: '3'" 
        echo "services:" 
        echo "  app:" 
        echo "    image: ${{ secrets.DOCKERHUB_USERNAME }}/react-mysql-app:latest" 
        echo "    ports:" 
        echo "      - \"3000:3000\"" 
        echo "    depends_on:" 
        echo "      - db" 
        echo "  db:" 
        echo "    image: mysql:5.7" 
        echo "    environment:" 
        echo "      MYSQL_ROOT_PASSWORD: example" 
        echo "      MYSQL_DATABASE: myapp" 
        echo "  phpmyadmin:" 
        echo "    image: phpmyadmin/phpmyadmin" 
        echo "    ports:" 
        echo "      - \"8080:80\"" 
        echo "    environment:" 
        echo "      PMA_HOST: db" 
 
    - name: Upload docker-compose.prod.yml 
      uses: actions/upload-artifact@v3 
      with: 
        name: production-compose 
        path: docker-compose.prod.yml 
